Contract CO1: findConnections
Operation: findConnections(origin: String, destination: String, minTransfer: int, maxLegs: int): List<List<Connection>>
Cross References: Use Case: Find Train Connections
Preconditions:
-The list of routes (listOfRoutes) has been loaded from the CSV file.
-The user has provided valid input for origin and destination cities.
-minTransfer and maxLegs are valid integers (minTransfer ≥ 0, 1 ≤ maxLegs ≤ 2).

Postconditions:
-Returns a list of possible connection paths (each path is a list of Connection objects) from the origin to the destination, satisfying the minimum transfer time and maximum number of connections.
-If no connections are found, returns an empty list.

Contract CO2: sortConnections
Operation: sortByDuration / sortByFirstClassPrice / sortBySecondClassPrice(connections: List<List<Connection>>): void
Cross References: Use Case: Sort Search Results
Preconditions:
-The list of connections has been generated by findConnections.
-The user has selected a sorting option.
Postconditions:
-The list of connections is sorted in-place according to the selected criterion (total duration, first class price, or second class price).


Contract CO3: accessTerminal
Operation: accessTerminal(): void
Cross References: Use Case: User Interacts with Terminal
Preconditions:
- The application has started successfully.
- The terminal (console) is available for input and output.
Postconditions:
- Prompts the user for input (departure city, arrival city, transfer time, max connections, sorting option).
- Displays search results or appropriate messages to the user.
- Handles user input and output for the main connection search workflow.