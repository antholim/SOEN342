@startuml

Client -> Main : launch application
Main -> CSVRepository : getRoutes("src/data/eu_rail_network.csv")
CSVRepository -> CSV : read file line by line
loop parse each record
  CSVRepository -> DayParser : parseDays("Mon,Wed,Fri")
  DayParser --> CSVRepository : Set<DayOfWeek>
  CSVRepository -> CSVRepository : create Record
end
CSVRepository --> Main : List<Record> routes loaded
Main -> Client : confirm "Routes loaded"

Client -> Main : enter filters (dep, arr, trainType, day,\nprices, depTime, duration, sort)
Main -> AdvancedSearch : searchAdvanced(filters)
AdvancedSearch -> AdvancedSearch : parse day & times
loop for each route
  AdvancedSearch -> TimeUtils : minutesBetween(dep, arr)
  TimeUtils --> AdvancedSearch : duration
end
AdvancedSearch --> Main : List<Record> directResults

alt direct routes found
  Main -> ConnectionSorter : sortResults(directResults)
  ConnectionSorter --> Main : sorted list
  Main -> Client : display table of routes
else none found
  Main -> Client : notify no direct routes
end

Client -> Main : request to search for connections
Main -> ConnectionFinder : findConnections(origin, destination,\nminTransfer, maxConnections, filters)
activate ConnectionFinder
ConnectionFinder -> ConnectionFinder : group routes by departureCity

loop exploreConnections(currentCity)
  ConnectionFinder -> ConnectionFinder : apply filters (trainType, day,\nprice, time, duration)
  ConnectionFinder -> TimeUtils : minutesBetween(prev.arr, next.dep)
  TimeUtils --> ConnectionFinder : transfer time
  ConnectionFinder -> ConnectionFinder : check min transfer\nand compatible days
  alt destination reached
    ConnectionFinder -> ConnectionFinder : build List<Connection>
    ConnectionFinder -> ConnectionFinder : getValidDaysForPath()
  else continue recursion
  end
end
ConnectionFinder --> Main : List<List<Connection>> paths
deactivate ConnectionFinder

alt connections found
  Main -> ConnectionSorter : sortByDuration / Price
  ConnectionSorter --> Main
  loop each path
    Main -> TimeUtils : minutesBetween(dep, arr)
    Main -> TimeUtils : minutesBetween(arr, next.dep)
  end
  Main -> Client : display connections with total time & prices
else
  Main -> Client : print "No connections found"
end

@enduml